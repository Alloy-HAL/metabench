// Copyright Louis Dionne 2013-2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

<% if n > 20 %>
    #define BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
    #define BOOST_MPL_LIMIT_VECTOR_SIZE <%= ((n + 9) / 10) * 10 %>
<% end %>

#include <boost/mpl/count_if.hpp>
#include <boost/mpl/quote.hpp>
#include <boost/mpl/vector.hpp>

#include <type_traits>
namespace mpl = boost::mpl;


template <typename N>
struct is_even
    : std::integral_constant<bool, N::type::value % 2 == 0>
{ };

using vector = mpl::vector<
    <%= (1..n).map { |i| "std::integral_constant<int, #{i}>" }.join(', ') %>
>;

#if defined(METABENCH)
using result = mpl::count_if<vector, mpl::quote1<is_even>>::type;
#endif

int main() { }
