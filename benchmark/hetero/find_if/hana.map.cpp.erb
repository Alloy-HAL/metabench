// Copyright Jason Rice 2015
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <boost/hana/find_if.hpp>
#include <boost/hana/map.hpp>

#include <type_traits>
namespace hana = boost::hana;


struct is_last {
    template <typename N>
    constexpr std::integral_constant<bool, N::value == <%= n %>>
    operator()(N const&) const;
};

struct undefined {};

int main() {
    constexpr auto map = hana::make_map(
        <%= (1..n).map { |i|
            "hana::make_pair(std::integral_constant<int, #{i}>{}, undefined{})"
        }.join(', ') %>
    );
    constexpr auto result = hana::find_if(map, is_last{});
    (void)result;
}
