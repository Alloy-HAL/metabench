// Copyright Louis Dionne 2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

<% if n > 10 %>
    #define FUSION_MAX_LIST_SIZE <%= ((n + 9) / 10) * 10 %>
<% end %>

#include <boost/fusion/include/as_list.hpp>
#include <boost/fusion/include/make_list.hpp>
#include <boost/fusion/include/transform.hpp>
namespace fusion = boost::fusion;


struct f {
    template <typename> struct result;
    template <typename F, typename X> struct result<F(X)> { typedef X type; };

    template <typename X>
    BOOST_CONSTEXPR X operator()(X x) const { return x; }
};

template <int i>
struct x { };

int main() {
    auto xs = fusion::make_list(
        <%= (1..n).map { |n| "x<#{n}>()" }.join(', ') %>
    );

#if defined(METABENCH)
    auto result = fusion::as_list(fusion::transform(xs, f{}));
#endif
}
