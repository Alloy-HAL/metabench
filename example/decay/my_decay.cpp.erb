#include <cstddef>
#include <type_traits>


template <typename T, typename U = typename std::remove_reference<T>::type>
struct decay {
    using type = typename std::remove_cv<U>::type;
};

template <typename T, typename U>
struct decay<T, U[]> { using type = U*; };
template <typename T, typename U, std::size_t N>
struct decay<T, U[N]> { using type = U*; };

template <typename T, typename R, typename ...A>
struct decay<T, R(A...)> { using type = R(*)(A...); };
template <typename T, typename R, typename ...A>
struct decay<T, R(A..., ...)> { using type = R(*)(A..., ...); };


<% (0..n).each do |i| %>
    struct T<%= i %> { };
    using foo1_<%= i %> = ::decay<T<%= i %>>::type;
    using foo2_<%= i %> = ::decay<T<%= i %>&>::type;
    using foo3_<%= i %> = ::decay<T<%= i %>&&>::type;
    using foo4_<%= i %> = ::decay<T<%= i %> const>::type;
    using foo5_<%= i %> = ::decay<T<%= i %> volatile>::type;
    using foo6_<%= i %> = ::decay<T<%= i %> [3]>::type;
<% end %>

int main() { }
